// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

/**
 * CheckResult represents the result of checking a rule chain
 */
export class CheckResult {
    "status": CheckStatus;
    "urls": string[];

    /** Creates a new CheckResult instance. */
    constructor($$source: Partial<CheckResult> = {}) {
        if (!("status" in $$source)) {
            this["status"] = CheckStatus.$zero;
        }
        if (!("urls" in $$source)) {
            this["urls"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CheckResult instance from a string or object.
     */
    static createFrom($$source: any = {}): CheckResult {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("urls" in $$parsedSource) {
            $$parsedSource["urls"] = $$createField1_0($$parsedSource["urls"]);
        }
        return new CheckResult($$parsedSource as Partial<CheckResult>);
    }
}

/**
 * CheckStatus represents the status of rule chain checking
 */
export enum CheckStatus {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = "",

    StatusMatched = "matched",
    StatusNotMatched = "not-matched",
    StatusCircularRedirect = "circular-redirect",
    StatusInfiniteRedirect = "infinite-redirect",
};

export class Rule {
    "id": string;
    "from": string;
    "to": string;
    "enabled": boolean;

    /** Creates a new Rule instance. */
    constructor($$source: Partial<Rule> = {}) {
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("from" in $$source)) {
            this["from"] = "";
        }
        if (!("to" in $$source)) {
            this["to"] = "";
        }
        if (!("enabled" in $$source)) {
            this["enabled"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Rule instance from a string or object.
     */
    static createFrom($$source: any = {}): Rule {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Rule($$parsedSource as Partial<Rule>);
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);

name: Release macOS DMG

on:
  push:
    branches: ['main']
    paths:
      - 'build/config.yml'

jobs:
  Version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_changed: ${{ steps.check_version.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for version change
        id: check_version
        run: |
          if git diff --name-only HEAD~1..HEAD | grep -q '^build/config\.yml$'; then
            # Extract version from current and previous commit (grep with 2 spaces to match indented version field)
            CURRENT_VERSION=$(git show HEAD:build/config.yml | grep '^  version:' | sed 's/.*version: "\(.*\)".*/\1/')
            PREV_VERSION=$(git show HEAD~1:build/config.yml | grep '^  version:' | sed 's/.*version: "\(.*\)".*/\1/')

            echo "Current version: $CURRENT_VERSION"
            echo "Previous version: $PREV_VERSION"

            if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
              echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
              echo "version_changed=1" >> "$GITHUB_OUTPUT"
            else
              echo "Version field not changed"
              echo "version_changed=0" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "build/config.yml not modified"
            echo "version_changed=0" >> "$GITHUB_OUTPUT"
          fi

      - name: Get version
        if: steps.check_version.outputs.version_changed == '1'
        id: get_version
        run: |
          VERSION=$(grep '^  version:' build/config.yml | sed 's/.*version: "\(.*\)".*/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Detected version: $VERSION"

  Build:
    needs: Version
    if: needs.Version.outputs.version_changed == '1'
    runs-on: macos-latest
    environment: release-macOS
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Ensure build scripts are executable
        run: chmod +x build/darwin/build-app-store.sh build/darwin/build-dmg.sh

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'

      - name: Install Task
        run: |
          brew install go-task/tap/go-task

      - name: Install Wails
        run: |
          go install github.com/wailsapp/wails/v3/cmd/wails3@v3.0.0-alpha.31


      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Install create-dmg
        run: |
          brew install create-dmg

      - name: Setup certificates and API key
        run: |
          # Create keychain
          security create-keychain -p actions $RUNNER_TEMP/app-signing.keychain-db
          security set-keychain-settings -lut 21600 $RUNNER_TEMP/app-signing.keychain-db
          security unlock-keychain -p actions $RUNNER_TEMP/app-signing.keychain-db
          security default-keychain -s $RUNNER_TEMP/app-signing.keychain-db

          # Import App Store certificate (Apple Distribution)
          echo "${{ secrets.APPLE_CERTIFICATE_APPSTORE_BASE64 }}" | base64 --decode > appstore_cert.p12
          security import appstore_cert.p12 -P "${{ secrets.APPLE_CERTIFICATE_APPSTORE_PASSWORD }}" -A -t cert -f pkcs12 -k $RUNNER_TEMP/app-signing.keychain-db
          rm appstore_cert.p12

          # Import Installer certificate (3rd Party Mac Developer Installer)
          echo "${{ secrets.APPLE_CERTIFICATE_INSTALLER_BASE64 }}" | base64 --decode > installer_cert.p12
          security import installer_cert.p12 -P "${{ secrets.APPLE_CERTIFICATE_INSTALLER_PASSWORD }}" -A -t cert -f pkcs12 -k $RUNNER_TEMP/app-signing.keychain-db
          rm installer_cert.p12

          # Import Developer ID certificate (for DMG)
          echo "${{ secrets.APPLE_CERTIFICATE_DEVELOPERID_BASE64 }}" | base64 --decode > developerid_cert.p12
          security import developerid_cert.p12 -P "${{ secrets.APPLE_CERTIFICATE_DEVELOPERID_PASSWORD }}" -A -t cert -f pkcs12 -k $RUNNER_TEMP/app-signing.keychain-db
          rm developerid_cert.p12

          # Set the partition list to allow codesign to use the keys
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions $RUNNER_TEMP/app-signing.keychain-db

          # Verify certificates are available
          echo "Available signing identities:"
          security find-identity -v -p codesigning $RUNNER_TEMP/app-signing.keychain-db

          # Setup API key
          mkdir -p $HOME/private_keys
          echo "${{ secrets.APPLE_API_KEY }}" | base64 --decode > $HOME/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: Build and package App Store version
        run: |
          # Create .env file for App Store build
          cat > .env << EOF
          APP_NAME=${{ vars.APP_NAME }}
          BIN_DIR=${{ vars.BIN_DIR }}
          SIGNING_IDENTITY_APPSTORE="${{ vars.SIGNING_IDENTITY_APPSTORE }}"
          SIGNING_IDENTITY_INSTALLER="${{ vars.SIGNING_IDENTITY_INSTALLER }}"
          TEAM_ID=${{ vars.TEAM_ID }}
          APP_BUNDLE_ID=${{ vars.APP_BUNDLE_ID }}
          APPLE_API_KEY_PATH=$HOME/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}
          EOF

          task darwin:release:appstore

      - name: Rename PKG with version
        run: |
          VERSION="${{ needs.Version.outputs.version }}"
          mv bin/LinkPure.pkg bin/LinkPure-${VERSION}.pkg

      - name: Build and package DMG
        run: |
          # Clean previous build
          rm -rf bin/LinkPure.app bin/LinkPure

          # Create .env file for DMG build
          cat > .env << EOF
          APP_NAME=${{ vars.APP_NAME }}
          BIN_DIR=${{ vars.BIN_DIR }}
          SIGNING_IDENTITY_DMG="${{ vars.SIGNING_IDENTITY_DMG }}"
          TEAM_ID=${{ vars.TEAM_ID }}
          APPLE_API_KEY_PATH=$HOME/private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          APPLE_API_KEY_ID=${{ secrets.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER=${{ secrets.APPLE_API_ISSUER }}
          EOF

          task darwin:release:dmg

      - name: Rename DMG with version
        run: |
          VERSION="${{ needs.Version.outputs.version }}"
          mv bin/LinkPure-Installer.dmg bin/LinkPure-${VERSION}.dmg

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: 'v${{ needs.Version.outputs.version }}'
          name: 'LinkPure v${{ needs.Version.outputs.version }}'
          draft: false
          prerelease: false
          files: |
            bin/LinkPure-${{ needs.Version.outputs.version }}.dmg
            bin/LinkPure-${{ needs.Version.outputs.version }}.pkg

      - name: Cleanup
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
          rm -rf ~/private_keys || true
